---
id: 16629962-bb60-4718-ad83-7da6c0705c9e
---

sequenceDiagram
    participant Client as Client (HTTP)
    participant Starter as HTTP Starter (/durable_orchestrate)
    participant Orchestrator as Durable Orchestrator
    participant Content as generate_content activity
    participant Image as generate_image activity
    participant Publish as publish_post activity
    participant Status as HTTP Status (/check_task_status)
    participant Cosmos as Cosmos DB
    participant Blob as Blob Storage
    participant Trace as TraceLogger

    Note over Starter,Status: Client receives `instanceId` and polls status endpoint

    Client->>Starter: POST /durable_orchestrate { brandId, postPlanId }
    Starter->>Orchestrator: start_new(instanceId)
    Starter-->>Client: 202 Accepted { instanceId }

    Orchestrator->>Trace: Log(start)
    Orchestrator->>Content: call_activity(brandId, postPlanId)
    Content->>Cosmos: Read brand & plan
    Content->>Cosmos: Upsert contentRef + caption
    Content-->>Orchestrator: contentRef

    Orchestrator->>Image: call_activity(contentRef)
    Image->>Cosmos: Read contentRef
    Image->>Blob: Create/store image
    Blob-->>Image: mediaRef
    Image->>Cosmos: Upsert mediaRef
    Image-->>Orchestrator: mediaRef

    Orchestrator->>Publish: call_activity(contentRef, mediaRef)
    Publish->>Cosmos: Upsert final post
    Publish-->>Orchestrator: postRef
    Orchestrator->>Trace: Log(done)

    Client->>Status: GET /check_task_status?instanceId=...
    Status->>Orchestrator: get_status(instanceId)
    Orchestrator-->>Status: runtime status + post
    Status-->>Client: StatusResponse

